/******************************************************************
Stylesheet: Mixins & Constants Stylesheet
******************************************************************/

/*********************
CLEARFIXIN'
*********************/
// Contain floats: nicolasgallagher.com/micro-clearfix-hack/
%clearfix {
  zoom: 1;
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}
.clearfix {
  @extend %clearfix;
}

/*********************
ZURB FOUNDATION VERTICAL CENTER'
example: @import valign-middle;
*********************/
@mixin valign-build($align: "middle"){
	display: table;
	width:100%;
	position: relative;
	width:100%;
		> *, .columns {
			display: table-cell;
			vertical-align: #{$align};
			&:not(:last-child) {
				display: table-cell !important;
			}
		}
		> *, .columns, [class*="column"] + [class*="column"]:last-child {
			float: none;
		}
}
@mixin valign($align: "middle") {
	@media #{$small-only} {
		.small-only-valign-#{$align}{
			@include valign-build("middle");
		}
	}
	@media #{$medium-up} {
		.medium-valign-#{$align}{
			@include valign-build("middle");
		}
	}
	@media #{$large-up} {
		.large-valign-#{$align}{
			@include valign-build("middle");
		}
	}
	@media #{$xlarge-up} {
		.xlarge-valign-#{$align}{
			@include valign-build("middle");
		}
	}
	@media #{$xxlarge-up} {
		.xxlarge-valign-#{$align}{
			@include valign-build("middle");
		}
	}
}


/*********************
CSS VERTICAL CENTER'
example: @extend %vertical-centered;
*********************/
%vertical-centered {
	display:table;
	&:before {
		content: '';
		display: inline-block;
		height: 100%;
		vertical-align: middle;
		/* Adjusts for spacing */
	}
	> * {
		display: inline-block;
		vertical-align: middle;
	}
}
.vertical-centered {
	@extend %vertical-centered;
}

/*********************
CSS3 VERTICAL CENTER'
example: @extend %vertical-align;
*********************/
%vertical-align {
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}
.vertical-align {
	@extend %vertical-align;
}

/*********************
TOOLS
*********************/

// BORDER-BOX ALL THE THINGS! (http://paulirish.com/2012/box-sizing-border-box-ftw/)
* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

// http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
.image-replacement {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

/*********************
COLORS
Need help w/ choosing your colors? Try this site out:
http://0to255.com/
*********************/

$alert-yellow: #ebe16f;
$alert-red: #fbe3e4;
$alert-green: #e6efc2;
$alert-blue: #d5edf8;

$black: #000;
$white: #fff;

/*
Here's a great tutorial on how to
use color variables properly:
http://sachagreif.com/sass-color-variables/
*/

/*********************
TYPOGRAPHY
*********************/

$sans-serif: "Helvetica Neue", Helvetica, Arial, sans-serif;
$serif: "Georgia", Cambria, Times New Roman, Times, serif;

/* 	To embed your own fonts, use this syntax
	and place your fonts inside the
	library/fonts folder. For more information
	on embedding fonts, go to:
	http://www.fontsquirrel.com/
	Be sure to remove the comment brackets.
*/

/*	@font-face {
	font-family: 'Font Name';
	src: url('library/fonts/font-name.eot');
	src: url('library/fonts/font-name.eot?#iefix') format('embedded-opentype'),
	url('library/fonts/font-name.woff') format('woff'),
	url('library/fonts/font-name.ttf') format('truetype'),
	url('library/fonts/font-name.svg#font-name') format('svg');
	font-weight: normal;
	font-style: normal;
	}
*/

/*
use the best ampersand
http://simplebits.com/notebook/2008/08/14/ampersands-2/
*/
span.amp {
  font-family: Baskerville,'Goudy Old Style',Palatino,'Book Antiqua',serif !important;
  font-style: italic;
}

// text alignment
.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

// alerts and notices
%alert {
  margin: 10px;
  padding: 5px 18px;
  border: 1px solid;
}

.alert-help {
  @extend %alert;
  border-color: darken($alert-yellow, 5%);
  background: $alert-yellow;
}

.alert-info {
  @extend %alert;
  border-color: darken($alert-blue, 5%);
  background: $alert-blue;
}

.alert-error {
  @extend %alert;
  border-color: darken($alert-red, 5%);
  background: $alert-red;
}

.alert-success {
  @extend %alert;
  border-color: darken($alert-green, 5%);
  background: $alert-green;
}

/********************
mixin for bullet proof font declaration syntax
example: @include declare-font-face('Gill Sans', 'Gill-Sans-MT-Pro-Italic', 400, italic);
********************/
@mixin declare-font-face($font-family, $font-filename, $font-weight: normal, $font-style: normal, $font-stretch: normal) {
  @font-face {
    font-family: #{$font-family};
    src: url("#{$base-url}#{$font-filename}.eot");
    src: url("#{$base-url}#{$font-filename}.eot?#iefix") format("embedded-opentype"), url("#{$base-url}#{$font-filename}.svg##{$font-family}") format("svg"), url("#{$base-url}#{$font-filename}.woff") format("woff"), url("#{$base-url}#{$font-filename}.ttf") format("truetype");
    font-weight: $font-weight;
    font-style: $font-style;
    font-stretch: $font-stretch;
  }
}

@mixin helvetica-fix($font-family, $font-local: Helvetica, $font-weight: 700) {
  @font-face {
    font-family: #{$font-family};
    src: local(#{$font-local});
    font-weight: $font-weight;
  }
}

@mixin declare-font-face-svg($font-family, $font-filename, $font-weight: normal, $font-style: normal, $font-stretch: normal) {
  @font-face {
    font-family: #{$font-family};
    src: url("#{$base-url}#{$font-filename}.svg##{$font-family}") format("svg");
    font-weight: $font-weight;
    font-style: $font-style;
    font-stretch: $font-stretch;
  }
}

/********************
OUTPUT COMMENT
********************/
@mixin debug($file) {
  /***********
  ******  #{$file}
  ***********/
}

// @include debug(#{$variable});

/*********************
BACKGROUND IMAGE DIR
*********************/

@mixin backgroundImage($filename) {
  @include debug(#{$asset-images-dir}#{$filename});
  background-image: url(#{$asset-images-dir}#{$filename});
}

// @include backgroundImage('filename.png');

/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@function prefix($property, $prefixes: (webkit moz o ms)) {
    $vendor-prefixed-properties: transform background-clip background-size;
    $result: ();
    @each $prefix in $prefixes {
       @if index($vendor-prefixed-properties, $property) {
         $property: -#{$prefix}-#{$property}
       }
       $result: append($result, $property);
    }
    @return $result;
}
@function trans-prefix($transition, $prefix: moz) {
    $prefixed: ();
    @each $trans in $transition {
        $prop-name: nth($trans, 1);
        $vendor-prop-name: prefix($prop-name, $prefix);
        $prop-vals: nth($trans, 2);
        $prefixed: append($prefixed, ($vendor-prop-name $prop-vals), comma);
    }

    @return $prefixed;
}

@mixin transition($values...) {
    $transitions: ();
    @each $declaration in $values {
        $prop: nth($declaration, 1);
        $prop-opts: ();
        $length: length($declaration);
        @for $i from 2 through $length {
            $prop-opts: append($prop-opts, nth($declaration, $i));
        }
        $trans: ($prop, $prop-opts);
        $transitions: append($transitions, $trans, comma);
    }

    -webkit-transition: trans-prefix($transitions, webkit);
    -moz-transition: trans-prefix($transitions, moz);
    -o-transition: trans-prefix($transitions, o);
    transition: $values;
}

/*********************
TRANSFORM
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transform(none);
*/

@mixin transform($transform) {
  // defining prefixes so we can use them in mixins below
  $prefixes: "-webkit", "-ms", "-o", "";
  @each $prefix in $prefixes {
    #{$prefix}-transform: #{$transform};
  }
  transform: #{$transform};
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdue it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
  background-color: $to;
  background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
  background-image: -webkit-linear-gradient(top, $from, $to);
  background-image: -moz-linear-gradient(top, $from, $to);
  background-image: -o-linear-gradient(top, $from, $to);
  background-image: linear-gradient(to bottom, $from, $to);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{#{$from}}', endColorstr='#{#{$to}}',GradientType=0 );
}

/*********************
CSS3 SHADOWS
*********************/
/* @include box-shadow(0, 1px, 1px, rgba(0, 0, 0, 0.075), inset); */
@mixin box-shadow($top, $left, $blur, $color, $inset: "") {
  -webkit-box-shadow: $top $left $blur $color #{$inset};
  -moz-box-shadow: $top $left $blur $color #{$inset};
  -ms-box-shadow: $top $left $blur $color #{$inset};
  box-shadow: $top $left $blur $color #{$inset};
}

/* @include text-shadow(1px, 1px, 5px, #000000); */
@mixin text-shadow($hshadow, $vshadow, $blur, $color) {
  -webkit-text-shadow: $hshadow $vshadow $blur $color;
  -moz-text-shadow: $hshadow $vshadow $blur $color;
  -ms-text-shadow: $hshadow $vshadow $blur $color;
  text-shadow: $hshadow $vshadow $blur $color;
}

/*********************
CSS3 NO SHADOWS
*********************/
/* @include no-box-shadow(); */
@mixin no-box-shadow {
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  -ms-box-shadow: none;
  box-shadow: none;
}

/* @include no-text-shadow(); */
@mixin no-text-shadow {
  -webkit-text-shadow: none;
  -moz-text-shadow: none;
  -ms-text-shadow: none;
  text-shadow: none;
}

/*******************
CUSTOM CSS3 TRANSITION MIXIN
@include blur($px: 0);
*******************/
/* @include blur(); */
@mixin blur($px: 0) {
  -webkit-filter: blur(#{$px}px) !important;
  -ms-filter: blur(#{$px}px) !important;
  -moz-filter: blur(#{$px}px) !important;
  filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='blur'><feGaussianBlur stdDeviation='#{$px}' /></filter></svg>#blur");
  filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius='#{#{$px}}');
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
  -webkit-box-sizing: $type;
  -moz-box-sizing: $type;
  -ms-box-sizing: $type;
  box-sizing: $type;
}

/*********************
CSS TRIANGLES
*********************/
@mixin cssTriangle($triangleSize, $triangleColor, $triangleDirection) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: solid $triangleSize;
  @if $triangleDirection == top {
    border-color: $triangleColor transparent transparent transparent;
  }
  @if $triangleDirection == bottom {
    border-color: transparent transparent $triangleColor transparent;
  }
  @if $triangleDirection == left {
    border-color: transparent transparent transparent $triangleColor;
  }
  @if $triangleDirection == right {
    border-color: transparent $triangleColor transparent transparent;
  }
  // .example { @include cssTriangle(5px, #fff, bottom); }
}

/*********************
CSS CORNER BEVEL
*********************/

@mixin corner-bevel($background-color: #aaa, $corner-top-left-bevel: 10px, $corner-top-right-bevel: 10px, $corner-bottom-right-bevel: 10px, $corner-bottom-left-bevel: 10px) {
  background: #{$background-color};
  // Fallback
  background: -webkit-linear-gradient(135deg, transparent $corner-top-left-bevel, $background-color $corner-top-left-bevel), -webkit-linear-gradient(225deg, transparent $corner-top-right-bevel, $background-color $corner-top-right-bevel), -webkit-linear-gradient(315deg, transparent $corner-bottom-right-bevel, $background-color $corner-bottom-right-bevel), -webkit-linear-gradient(45deg, transparent $corner-bottom-left-bevel, $background-color $corner-bottom-left-bevel);
  -webkit-border-corner-shape: bevel;
  -webkit-background-size: 50.5% 50.5%;
  background: -moz-linear-gradient(135deg, transparent $corner-top-left-bevel, $background-color $corner-top-left-bevel), -moz-linear-gradient(225deg, transparent $corner-top-right-bevel, $background-color $corner-top-right-bevel), -moz-linear-gradient(315deg, transparent $corner-bottom-right-bevel, $background-color $corner-bottom-right-bevel), -moz-linear-gradient(45deg, transparent $corner-bottom-left-bevel, $background-color $corner-bottom-left-bevel);
  -moz-border-corner-shape: bevel;
  -moz-background-size: 50.5% 50.5%;
  background: -o-linear-gradient(135deg, transparent $corner-top-left-bevel, $background-color $corner-top-left-bevel), -o-linear-gradient(225deg, transparent $corner-top-right-bevel, $background-color $corner-top-right-bevel), -o-linear-gradient(315deg, transparent $corner-bottom-right-bevel, $background-color $corner-bottom-right-bevel), -o-linear-gradient(45deg, transparent $corner-bottom-left-bevel, $background-color $corner-bottom-left-bevel);
  -o-border-corner-shape: bevel;
  -o-background-size: 50.5% 50.5%;
  background: linear-gradient(135deg, transparent $corner-top-left-bevel, $background-color $corner-top-left-bevel), linear-gradient(225deg, transparent $corner-top-right-bevel, $background-color $corner-top-right-bevel), linear-gradient(315deg, transparent $corner-bottom-right-bevel, $background-color $corner-bottom-right-bevel), linear-gradient(45deg, transparent $corner-bottom-left-bevel, $background-color $corner-bottom-left-bevel);
  border-corner-shape: bevel;
  background-position: top left, top right, bottom right, bottom left;
  background-size: 50.5% 50.5%;
  background-repeat: no-repeat;
  @content;
}

// Text alignment class names
$border-class-names: small-only, small, medium-only, medium, large-only, large, xlarge-only, xlarge, xxlarge-only, xxlarge;

// Text alignment breakpoints
$border-class-breakpoints: $small-only, $small-up, $medium-only, $medium-up, $large-only, $large-up, $xlarge-only, $xlarge-up, $xxlarge-only, $xxlarge-up;

// Generates text align and justify classes
@mixin border-classes {
  .border {
    border: rem-calc(1) solid $input-border-color !important;
  }
  @for $i from 1 through length($border-class-names) {
    @media #{nth($border-class-breakpoints, $i)} {
      .#{nth($border-class-names, $i)}-border {
        border: rem-calc(1) solid $input-border-color !important;
      }
    }
  }
}



/**
 * Burger mixin (zurb foundation 5.5 compatible)
 *
$burger-padding: $small-column-gutter;
.menu-burger {
    display: inline-block;
    padding: $burger-padding;
    span {
        @include burger($burger-padding, 4px, 5px, $svg-icons-color, 3px, 0.75s);
    }

}
.move-right {
    .menu-burger {
        span {
            @include burger-to-cross;
        }
    }
}
 *
 *
 */
$burger-width: 30px !default;
$burger-thickness: 5px !default;
$burger-gutter: 3px !default;
$burger-color: black !default;
$burger-radius: 0 !default;
$burger-duration: 0.3s !default;

/**
 * Burger start animation
 */
@mixin burger($width: $burger-width, $thickness: $burger-thickness, $gutter: $burger-gutter, $color: $burger-color, $border-radius: $burger-radius, $transition-duration: $burger-duration) {
    $prefixes: "-webkit-", "-moz-", "-ms-", "-o-", "";
    // reset globals for burger-to-cross mixin
    $burger-width: $width !default;
    $burger-gutter: $thickness !default;
    $burger-duration: $transition-duration !default;
    position: relative;
    margin-top: $thickness + $gutter;
    margin-bottom: $thickness + $gutter;

    @each $prefix in $prefixes {
        #{$prefix}transform-style: preserve-3d;
    }
    & {
        @each $prefix in $prefixes {
            #{$prefix}transform: translateY(0) rotate(0deg);
            #{$prefix}transition-timing-function: linear;
            #{$prefix}transition-duration: $transition-duration;
        }
    }
    &, &:before, &:after {
        top: 0;
        display: inline-block;
        width: $width;
        height: $thickness;
        background-color: $color;
        @if $border-radius != 0 {
            border-radius: $border-radius;
        }
        @each $prefix in $prefixes {
            #{$prefix}transition-property: #{$prefix}transform background-color;
            #{$prefix}transform: rotate(0deg);
            #{$prefix}transition-duration: $transition-duration * 1.5;
        }
    }
    &:before, &:after {
        position: absolute;
        content: "";
        @each $prefix in $prefixes {
            #{$prefix}transition-property: #{$prefix}transform background-color;
            #{$prefix}transform: rotate(0deg);
            #{$prefix}transition-duration: $transition-duration;
        }
    }
    &:before {
        @each $prefix in $prefixes {
            #{$prefix}transform: translateY(-($thickness + $gutter)) rotate(0deg);
        }
    }
    &:after {
        @each $prefix in $prefixes {
            #{$prefix}transform: translateY($thickness + $gutter) rotate(0deg);
        }
    }
}

/**
 * Select parts of the burger
 *
 * (---) top    -> &:before
 * [---] middle -> &
 * (---) bottom -> &:after
 */
@mixin burger-parts {
    &, &:before, &:after {
        @content;
    }
}

@mixin burger-top {
    &:before {
        @content;
    }
}

@mixin burger-middle {
    & {
        @content;
    }
}

@mixin burger-bottom {
    &:after {
        @content;
    }
}

/**
 * Burger end animation
 */
@mixin burger-to-cross($transition-duration: $burger-duration, $width: $burger-thickness, $gutter: $burger-gutter) {
    $prefixes: "-webkit-", "-moz-", "-ms-", "-o-", "";
    &, &:before, &:after {
        @each $prefix in $prefixes {
            #{$prefix}transition-property: #{$prefix}transform background-color;
            #{$prefix}transition-duration: $transition-duration * 1.5;
        }
    }
    & {
        background-color: transparent;
        @each $prefix in $prefixes {
            #{$prefix}transform: translateY(0) rotate(0deg);
            #{$prefix}transition-property: #{$prefix}transform background-color;
            #{$prefix}transition-timing-function: linear;
            #{$prefix}transition-duration: $transition-duration;
        }
    }
    &:before {
        @each $prefix in $prefixes {
            #{$prefix}transform: translateY(0) rotate(45deg);
        }
    }
    &:after {
        @each $prefix in $prefixes {
            #{$prefix}transform: translateY(0) rotate(-45deg);
        }
    }
}